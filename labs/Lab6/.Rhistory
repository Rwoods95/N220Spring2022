sample_size= 100
mean = 100
sd= 100
Z_value_for_confidence_95 = 1.96
sample_size= 100
mean = 100
sample_size= 100
mean = 100
sd= 100
Z_value_for_confidence_95 = 1.96
confidence_interval_upper = mean +(Z_value_for_confidence_95 * sd/sqrt(sample_size) )
sample_size= 100
mean = 100
sd= 100
Z_value_for_confidence_95 = 1.96
confidence_interval_upper = mean +(Z_value_for_confidence_95 * sd/sqrt(sample_size)
confidence_interval_upper = mean +(Z_value_for_confidence_95 * sd/sqrt(sample_size)
confidence_interval_lower = mean  (Z_value_for_confidence_95 * sd/sqrt(sample_size)
confidence_interval_lower
confidence_interval_lower
mean
confidence_interval_upper
confidence_interval_lower = mean -(Z_value_for_confidence_95 * sd/sqrt(sample_size))
sample_size= 100
sample_size= 100 #sample size
mean = 100  # mean
sd= 100  # standard deviation
Z_value_for_confidence_95 = 1.96
confidence_interval_upper = mean +(Z_value_for_confidence_95 * sd/sqrt(sample_size)
# creating a vector x with values increasing by 1 from 1 to 20
x <- 1:20; x
# creating a vector y with values decreasing by 1 from 20 to 1
y <- 20:1; y
# creating a vector tmp with values 4, 6, 3
tmp <- c(4, 6, 3); tmp
# creating a vector tmp1 with repeating values of tmp, 10 times
tmp1 <- rep(tmp, 10); tmp1
# creating a vector tmp2 with repeating values of 4-> 10 times, 6-> 20 times and 3-> 30 times
tmp2 <- rep(tmp, c(10, 20, 30)); tmp2
# creating a vector z in which first the values increase from 1 to 20 then decrease from 20 to 1
z <- c(1:20, 19:1); z
x <- 1:20; x
sample_size= 100 #sample size
mean = 100  # mean
sd= 100  # standard deviation
Z_value_for_confidence_95 = 1.96
confidence_interval_upper = mean +(Z_value_for_confidence_95 * sd/sqrt(sample_size)
x <- 1:20; x # creating a vector x with values increasing by 1 from 1 to 20
y <- 20:1; y # creating a vector y with values decreasing by 1 from 20 to 1
tmp <- c(4, 6, 3); tmp # creating a vector tmp with values 4, 6, 3
tmp1 <- rep(tmp, 10); tmp1 # creating a vector tmp1 with repeating values of tmp, 10 times
tmp2 <- rep(tmp, c(10, 20, 30)); tmp2 # creating a vector tmp2 with repeating values of 4-> 10 times, 6-> 20 times and 3-> 30 times
z <- c(1:20, 19:1); z # creating a vector z in which first the values increase from 1 to 20 then decrease from 20 to 1
x <- 1:20; x # creating a vector x with values increasing by 1 from 1 to 20
y <- 20:1; y # creating a vector y with values decreasing by 1 from 20 to 1
tmp <- c(4, 6, 3); tmp # creating a vector tmp with values 4, 6, 3
tmp1 <- rep(tmp, 10); tmp1 # creating a vector tmp1 with repeating values of tmp, 10 times
tmp2 <- rep(tmp, c(10, 20, 30)); tmp2 # creating a vector tmp2 with repeating values of 4-> 10 times, 6-> 20 times and 3-> 30 times
z <- c(1:20, 19:1); z # creating a vector z in which first the values increase from 1 to 20 then decrease from 20 to 1
z
set.seed(50)
xVec <- sample(0:999, 250, replace=T)
yVec <- sample(0:999, 250, replace=T)
yvec_2 = yVec[-(1:1)]
xvec_2 = xVec[1:(length(xVec)-1)]
answer_A = yvec_2 - xvec_2
yvec_3 = yVec[1:(length(yVec)-1)]
yvec_3 = yVec[1:(length(yVec)-1)]
yvec_3 = yVec[1:(length(yVec)-1)]
yvec_3 = yVec[1:(length(yVec)-1)]
xvec_3 = xVec[-(1:1)]
answer_B = sin(yvec_3)/cos(xvec_3)
xvec_4 = xVec[1:(length(xVec)-2)]
xvec_5 = xVec[1:length(xVec)-1]
xvec_5 = xvec_5[-(1:1)]
xvec_6 = xVec[-(1:2)]
xVec_7 = xVec[-(1:1)]
xVec_8 = xVec[1:(length(xVec)-1)]
answer_D = sum(exp(-1*xVec_7)/ (xVec_8 + 10))
confidence_interval_lower = mean -(Z_value_for_confidence_95 * sd/sqrt(sample_size))
sample_size= 100 #sample size
mean = 100  # mean
sd= 100  # standard deviation
Z_value_for_confidence_95 = 1.96
confidence_interval_upper = mean +(Z_value_for_confidence_95 * sd/sqrt(sample_size)
x <- 1:20; x # creating a vector x with values increasing by 1 from 1 to 20
y <- 20:1; y # creating a vector y with values decreasing by 1 from 20 to 1
tmp <- c(4, 6, 3); tmp # creating a vector tmp with values 4, 6, 3
confidence_interval_upper = mean +(Z_value_for_confidence_95 * sd/sqrt(sample_size)
x <- 1:20; x # creating a vector x with values increasing by 1 from 1 to 20
y <- 20:1; y # creating a vector y with values decreasing by 1 from 20 to 1
sd= 100  # standard deviation
Z_value_for_confidence_95 = 1.96
confidence_interval_upper = mean +(Z_value_for_confidence_95 * sd/sqrt(sample_size)
x <- 1:20; x # creating a vector x with values increasing by 1 from 1 to 20
y <- 20:1; y # creating a vector y with values decreasing by 1 from 20 to 1
tmp <- c(4, 6, 3); tmp # creating a vector tmp with values 4, 6, 3
tmp1 <- rep(tmp, 10); tmp1 # creating a vector tmp1 with repeating values of tmp, 10 times
tmp2 <- rep(tmp, c(10, 20, 30)); tmp2 # creating a vector tmp2 with repeating values of 4-> 10 times, 6-> 20 times and 3-> 30 times
z <- c(1:20, 19:1); z # creating a vector z in which first the values increase from 1 to 20 then decrease from 20 to 1
set.seed(50)
xVec <- sample(0:999, 250, replace=T)
yVec <- sample(0:999, 250, replace=T)
yvec_2 = yVec[-(1:1)]
xvec_2 = xVec[1:(length(xVec)-1)]
answer_A = yvec_2 - xvec_2
yvec_3 = yVec[1:(length(yVec)-1)]
xvec_3 = xVec[-(1:1)]
answer_B = sin(yvec_3)/cos(xvec_3)
xvec_4 = xVec[1:(length(xVec)-2)]
xvec_5 = xVec[1:length(xVec)-1]
xvec_5 = xvec_5[-(1:1)]
xvec_6 = xVec[-(1:2)]
answer_C = xvec_4 + 2 * xvec_5 - xvec_6
xVec_7 = xVec[-(1:1)]
xVec_8 = xVec[1:(length(xVec)-1)]
answer_D = sum(exp(-1*xVec_7)/ (xVec_8 + 10))
sample_size= 100 #sample size
mean = 100  # mean
sd= 100  # standard deviation
Z_value_for_confidence_95 = 1.96
confidence_interval_upper = mean +(Z_value_for_confidence_95 * sd/sqrt(sample_size)
Confidence_interval_lower = mean -(Z_value_for_confidence_95 * sd/sqrt(sample_size))
confidence_interval_lower = mean -(Z_value_for_confidence_95 * sd/sqrt(sample_size))
confidence_interval_upper = mean +(Z_value_for_confidence_95 * sd/sqrt(sample_size)
sample_size= 100 #sample size
sample_size= 100 #sample size
mean = 100  # mean
sd= 100  # standard deviation
Z_value_for_confidence_95 = 1.96
confidence_interval_upper = mean +(Z_value_for_confidence_95 * sd/sqrt(sample_size)
confidence_interval_lower = mean -(Z_value_for_confidence_95 * sd/sqrt(sample_size))
sample_size= 100 #sample size
mean = 100  # mean
sd= 100  # standard deviation
Z_value_for_confidence_95 = 1.96
confidence_upper = mean +(Z_value_for_confidence_95 * sd/sqrt(sample_size)
confidence_lower = mean -(Z_value_for_confidence_95 * sd/sqrt(sample_size))
sample_size= 100 #sample size
mean = 100  # mean
sd= 100  # standard deviation
Z_value_for_confidence_95 = 1.96
x <- 1:20; x # creating a vector x with values increasing by 1 from 1 to 20
y <- 20:1; y # creating a vector y with values decreasing by 1 from 20 to 1
tmp <- c(4, 6, 3); tmp # creating a vector tmp with values 4, 6, 3
tmp1 <- rep(tmp, 10); tmp1 # creating a vector tmp1 with repeating values of tmp, 10 times
tmp2 <- rep(tmp, c(10, 20, 30)); tmp2 # creating a vector tmp2 with repeating values of 4-> 10 times, 6-> 20 times and 3-> 30 times
z <- c(1:20, 19:1); z # creating a vector z in which first the values increase from 1 to 20 then decrease from 20 to 1
set.seed(50)
xVec <- sample(0:999, 250, replace=T)
yVec <- sample(0:999, 250, replace=T)
yvec_2 = yVec[-(1:1)]
xvec_2 = xVec[1:(length(xVec)-1)]
answer_A = yvec_2 - xvec_2
yvec_3 = yVec[1:(length(yVec)-1)]
xvec_3 = xVec[-(1:1)]
answer_B = sin(yvec_3)/cos(xvec_3)
xvec_4 = xVec[1:(length(xVec)-2)]
xvec_5 = xVec[1:length(xVec)-1]
xvec_5 = xvec_5[-(1:1)]
xvec_6 = xVec[-(1:2)]
answer_C = xvec_4 + 2 * xvec_5 - xvec_6
xVec_7 = xVec[-(1:1)]
xVec_8 = xVec[1:(length(xVec)-1)]
answer_D = sum(exp(-1*xVec_7)/ (xVec_8 + 10))
answer_B = sin(yvec_3)/cos(xvec_3)
answer_B = sin(yvec_3)/cos(xvec_3)
sample_size= 100 #sample size
mean = 100  # mean
sd= 100  # standard deviation
Z_value_for_confidence_95 = 1.96
x <- 1:20; x # creating a vector x with values increasing by 1 from 1 to 20
y <- 20:1; y # creating a vector y with values decreasing by 1 from 20 to 1
tmp <- c(4, 6, 3); tmp # creating a vector tmp with values 4, 6, 3
tmp1 <- rep(tmp, 10); tmp1 # creating a vector tmp1 with repeating values of tmp, 10 times
tmp2 <- rep(tmp, c(10, 20, 30)); tmp2 # creating a vector tmp2 with repeating values of 4-> 10 times, 6-> 20 times and 3-> 30 times
z <- c(1:20, 19:1); z # creating a vector z in which first the values increase from 1 to 20 then decrease from 20 to 1
set.seed(50)
xVec <- sample(0:999, 250, replace=T)
yVec <- sample(0:999, 250, replace=T)
yvec_2 = yVec[-(1:1)]
xvec_2 = xVec[1:(length(xVec)-1)]
answer_A = yvec_2 - xvec_2
yvec_3 = yVec[1:(length(yVec)-1)]
xvec_3 = xVec[-(1:1)]
answer_B = sin(yvec_3)/cos(xvec_3)
answer_B
xvec_4 = xVec[1:(length(xVec)-2)]
xvec_5 = xVec[1:length(xVec)-1]
xvec_5 = xvec_5[-(1:1)]
xvec_6 = xVec[-(1:2)]
answer_C = xvec_4 + 2 * xvec_5 - xvec_6
answer_C
xVec_7 = xVec[-(1:1)]
xVec_8 = xVec[1:(length(xVec)-1)]
answer_D = sum(exp(-1*xVec_7)/ (xVec_8 + 10))
answer_D
answer_4a = yVec[yVec > 600]
answer_4b = which(yVec > 600)
answer_4c = xVec[yVec > 600]
answer_4d = sqrt(abs(xVec-mean(xVec)))
answer_4e = sum( yVec>max(yVec)-200 )
answer_4f = sum(xVec%%2==0)
answer_4g = xVec[order(yVec)]
answer_4h = NULL
for (i in seq(from = 1, to = length(yVec), by = 3)) {
answer_4h <- append(answer_4h, yVec[i])
}
#Question1
sample_size= 100 #sample size
mean = 100  # mean
sd= 100  # standard deviation
Z_value_for_confidence_95 = 1.96
#Question2
x <- 1:20; x # creating a vector x with values increasing by 1 from 1 to 20
y <- 20:1; y # creating a vector y with values decreasing by 1 from 20 to 1
tmp <- c(4, 6, 3); tmp # creating a vector tmp with values 4, 6, 3
tmp1 <- rep(tmp, 10); tmp1 # creating a vector tmp1 with repeating values of tmp, 10 times
tmp2 <- rep(tmp, c(10, 20, 30)); tmp2 # creating a vector tmp2 with repeating values of 4-> 10 times, 6-> 20 times and 3-> 30 times
z <- c(1:20, 19:1); z # creating a vector z in which first the values increase from 1 to 20 then decrease from 20 to 1
#Question3
set.seed(50)
xVec <- sample(0:999, 250, replace=T)
yVec <- sample(0:999, 250, replace=T)
yvec_2 = yVec[-(1:1)]
xvec_2 = xVec[1:(length(xVec)-1)]
answer_A = yvec_2 - xvec_2
answer_A
yvec_3 = yVec[1:(length(yVec)-1)]
xvec_3 = xVec[-(1:1)]
answer_B = sin(yvec_3)/cos(xvec_3)
answer_B
xvec_4 = xVec[1:(length(xVec)-2)]
xvec_5 = xVec[1:length(xVec)-1]
xvec_5 = xvec_5[-(1:1)]
xvec_6 = xVec[-(1:2)]
answer_C = xvec_4 + 2 * xvec_5 - xvec_6
answer_C
xVec_7 = xVec[-(1:1)]
xVec_8 = xVec[1:(length(xVec)-1)]
answer_D = sum(exp(-1*xVec_7)/ (xVec_8 + 10))
answer_D
#Question 4
answer_4a = yVec[yVec > 600]
answer_4b = which(yVec > 600)
answer_4c = xVec[yVec > 600]
answer_4d = sqrt(abs(xVec-mean(xVec)))
answer_4e = sum( yVec>max(yVec)-200 )
answer_4f = sum(xVec%%2==0)
answer_4g = xVec[order(yVec)]
answer_4h = NULL
for (i in seq(from = 1, to = length(yVec), by = 3)) {
answer_4h <- append(answer_4h, yVec[i])
}
#Question1
sample_size= 100 #sample size
mean = 100  # mean
sd= 100  # standard deviation
Z_value_for_confidence_95 = 1.96
#Question2
x <- 1:20; x # creating a vector x with values increasing by 1 from 1 to 20
y <- 20:1; y # creating a vector y with values decreasing by 1 from 20 to 1
tmp <- c(4, 6, 3); tmp # creating a vector tmp with values 4, 6, 3
tmp1 <- rep(tmp, 10); tmp1 # creating a vector tmp1 with repeating values of tmp, 10 times
tmp2 <- rep(tmp, c(10, 20, 30)); tmp2 # creating a vector tmp2 with repeating values of 4-> 10 times, 6-> 20 times and 3-> 30 times
z <- c(1:20, 19:1); z # creating a vector z in which first the values increase from 1 to 20 then decrease from 20 to 1
#Question3
set.seed(50)
xVec <- sample(0:999, 250, replace=T)
yVec <- sample(0:999, 250, replace=T)
yvec_2 = yVec[-(1:1)]
xvec_2 = xVec[1:(length(xVec)-1)]
answer_A = yvec_2 - xvec_2
answer_A
yvec_3 = yVec[1:(length(yVec)-1)]
xvec_3 = xVec[-(1:1)]
answer_B = sin(yvec_3)/cos(xvec_3)
answer_B
xvec_4 = xVec[1:(length(xVec)-2)]
xvec_5 = xVec[1:length(xVec)-1]
xvec_5 = xvec_5[-(1:1)]
xvec_6 = xVec[-(1:2)]
answer_C = xvec_4 + 2 * xvec_5 - xvec_6
answer_C
xVec_7 = xVec[-(1:1)]
xVec_8 = xVec[1:(length(xVec)-1)]
answer_D = sum(exp(-1*xVec_7)/ (xVec_8 + 10))
answer_D
#Question 4
answer_4a = yVec[yVec > 600] #Pick those values in yVec which are greater than 600.
answer_4a
answer_4b = which(yVec > 600)#Store the index positions of the values in yVec which are greater than 600.
answer_4b
answer_4c = xVec[yVec > 600] #Pick the values in xVec corresponding to the values in yVec which are greater than 600.
answer_4c
answer_4d = sqrt(abs(xVec-mean(xVec))) #Create vector
answer_4d
answer_4e = sum( yVec>max(yVec)-200 ) #Count the number of values in yVec that are within 200 of the maximum value of the terms in yVec.
answer_4e
answer_4f = sum(xVec%%2==0) #Count the number of values in xVec that are divisible by 2.
answer_4f
answer_4g = xVec[order(yVec)] #Sort the numbers in xVec in the order of increasing values in yVec.
answer_4g
answer_4h = NULL
for (i in seq(from = 1, to = length(yVec), by = 3)) {
answer_4h <- append(answer_4h, yVec[i])
answer_4h
}
#Question1
sample_size= 100 #sample size
mean = 100  # mean
sd= 100  # standard deviation
Z_value_for_confidence_95 = 1.96
confidence_interval_upper = mean + (Z_value_for_confidence_95 * sd/sqrt(sample_size))
confidence_interval_below = mean - (Z_value_for_confidence_95 * sd/sqrt(sample_size))
#Question2
x <- 1:20; x # creating a vector x with values increasing by 1 from 1 to 20
y <- 20:1; y # creating a vector y with values decreasing by 1 from 20 to 1
tmp <- c(4, 6, 3); tmp # creating a vector tmp with values 4, 6, 3
tmp1 <- rep(tmp, 10); tmp1 # creating a vector tmp1 with repeating values of tmp, 10 times
tmp2 <- rep(tmp, c(10, 20, 30)); tmp2 # creating a vector tmp2 with repeating values of 4-> 10 times, 6-> 20 times and 3-> 30 times
z <- c(1:20, 19:1); z # creating a vector z in which first the values increase from 1 to 20 then decrease from 20 to 1
#Question3
set.seed(50)
xVec <- sample(0:999, 250, replace=T)
yVec <- sample(0:999, 250, replace=T)
yvec_2 = yVec[-(1:1)]
xvec_2 = xVec[1:(length(xVec)-1)]
answer_A = yvec_2 - xvec_2
answer_A
yvec_3 = yVec[1:(length(yVec)-1)]
xvec_3 = xVec[-(1:1)]
answer_B = sin(yvec_3)/cos(xvec_3)
answer_B
xvec_4 = xVec[1:(length(xVec)-2)]
xvec_5 = xVec[1:length(xVec)-1]
xvec_5 = xvec_5[-(1:1)]
xvec_6 = xVec[-(1:2)]
answer_C = xvec_4 + 2 * xvec_5 - xvec_6
answer_C
xVec_7 = xVec[-(1:1)]
xVec_8 = xVec[1:(length(xVec)-1)]
answer_D = sum(exp(-1*xVec_7)/ (xVec_8 + 10))
answer_D
#Question 4
answer_4a = yVec[yVec > 600] #Pick those values in yVec which are greater than 600.
answer_4a
answer_4b = which(yVec > 600)#Store the index positions of the values in yVec which are greater than 600.
answer_4b
answer_4c = xVec[yVec > 600] #Pick the values in xVec corresponding to the values in yVec which are greater than 600.
answer_4c
answer_4d = sqrt(abs(xVec-mean(xVec))) #Create vector
answer_4d
answer_4e = sum( yVec>max(yVec)-200 ) #Count the number of values in yVec that are within 200 of the maximum value of the terms in yVec.
answer_4e
answer_4f = sum(xVec%%2==0) #Count the number of values in xVec that are divisible by 2.
answer_4f
answer_4g = xVec[order(yVec)] #Sort the numbers in xVec in the order of increasing values in yVec.
answer_4g
answer_4h = NULL
for (i in seq(from = 1, to = length(yVec), by = 3)) {
answer_4h <- append(answer_4h, yVec[i])
answer_4h
}
